# Samba Operator v0.2 Default (https://github.com/samba-in-kubernetes/samba-operator/releases/tag/v0.2)
# Generated by k2tf + tfk8s (CustomResourceDefinition)

resource "kubernetes_manifest" "customresourcedefinition_smbcommonconfigs_samba_operator_samba_org" {
  manifest = {
    "apiVersion" = "apiextensions.k8s.io/v1"
    "kind"       = "CustomResourceDefinition"
    "metadata" = {
      "annotations" = {
        "controller-gen.kubebuilder.io/version" = "v0.6.2"
      }
      "name" = "smbcommonconfigs.samba-operator.samba.org"
    }
    "spec" = {
      "group" = "samba-operator.samba.org"
      "names" = {
        "kind"     = "SmbCommonConfig"
        "listKind" = "SmbCommonConfigList"
        "plural"   = "smbcommonconfigs"
        "singular" = "smbcommonconfig"
      }
      "scope" = "Namespaced"
      "versions" = [
        {
          "name" = "v1alpha1"
          "schema" = {
            "openAPIV3Schema" = {
              "description" = "SmbCommonConfig is the Schema for the smbcommonconfigs API"
              "properties" = {
                "apiVersion" = {
                  "description" = "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
                  "type"        = "string"
                }
                "kind" = {
                  "description" = "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
                  "type"        = "string"
                }
                "metadata" = {
                  "type" = "object"
                }
                "spec" = {
                  "description" = "SmbCommonConfigSpec values act as a template for properties of the services that will host shares."
                  "properties" = {
                    "network" = {
                      "description" = "Network specifies what kind of networking shares associated with this config will use."
                      "properties" = {
                        "publish" = {
                          "description" = "Publish broadly specifies what kind of networking shares associated with this config are expected to use."
                          "enum" = [
                            "cluster",
                            "external",
                          ]
                          "type" = "string"
                        }
                      }
                      "type" = "object"
                    }
                  }
                  "type" = "object"
                }
                "status" = {
                  "description" = "SmbCommonConfigStatus defines the observed state of SmbCommonConfig"
                  "type"        = "object"
                }
              }
              "type" = "object"
            }
          }
          "served"  = true
          "storage" = true
          "subresources" = {
            "status" = {}
          }
        },
      ]
    }
  }
}

resource "kubernetes_manifest" "customresourcedefinition_smbsecurityconfigs_samba_operator_samba_org" {
  manifest = {
    "apiVersion" = "apiextensions.k8s.io/v1"
    "kind"       = "CustomResourceDefinition"
    "metadata" = {
      "annotations" = {
        "controller-gen.kubebuilder.io/version" = "v0.6.2"
      }
      "name" = "smbsecurityconfigs.samba-operator.samba.org"
    }
    "spec" = {
      "group" = "samba-operator.samba.org"
      "names" = {
        "kind"     = "SmbSecurityConfig"
        "listKind" = "SmbSecurityConfigList"
        "plural"   = "smbsecurityconfigs"
        "singular" = "smbsecurityconfig"
      }
      "scope" = "Namespaced"
      "versions" = [
        {
          "name" = "v1alpha1"
          "schema" = {
            "openAPIV3Schema" = {
              "description" = "SmbSecurityConfig is the Schema for the smbsecurityconfigs API"
              "properties" = {
                "apiVersion" = {
                  "description" = "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
                  "type"        = "string"
                }
                "kind" = {
                  "description" = "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
                  "type"        = "string"
                }
                "metadata" = {
                  "type" = "object"
                }
                "spec" = {
                  "description" = "SmbSecurityConfigSpec defines the desired state of SmbSecurityConfig"
                  "properties" = {
                    "dns" = {
                      "description" = "DNS is used to configure properties related to the DNS services of the domain."
                      "properties" = {
                        "register" = {
                          "description" = "Register a specified member server's address with the domain's DNS or disabled when set to \"never\". NOTE: cluster-ip is not generally supported, it is only for testing."
                          "enum" = [
                            "never",
                            "external-ip",
                            "cluster-ip",
                          ]
                          "type" = "string"
                        }
                      }
                      "type" = "object"
                    }
                    "domains" = {
                      "description" = "Domains holds a list of primary & trusted domain configurations. If left empty a simple default that automatically works with trusted domains will be used."
                      "items" = {
                        "description" = "SmbSecurityDomainSpec configures samba's domain management and ID mapping behavior for the specified domain."
                        "properties" = {
                          "backend" = {
                            "description" = "Mode specifies what approach to security is being used."
                            "enum" = [
                              "autorid",
                              "ad-rfc2307",
                            ]
                            "type" = "string"
                          }
                          "name" = {
                            "description" = "Name of the domain."
                            "minLength"   = 1
                            "type"        = "string"
                          }
                        }
                        "type" = "object"
                      }
                      "type" = "array"
                    }
                    "joinSources" = {
                      "description" = "JoinSources holds a list of sources for domain join data for this configuration."
                      "items" = {
                        "description" = "SmbSecurityJoinSpec configures how samba instances are allowed to join to active directory if needed."
                        "properties" = {
                          "userJoin" = {
                            "description" = "SmbSecurityUserJoinSpec configures samba container instances to use a secret containing a username and password."
                            "properties" = {
                              "key" = {
                                "default"     = "join.json"
                                "description" = "Key within the secret containing the username and password."
                                "type"        = "string"
                              }
                              "secret" = {
                                "description" = "Secret that contains the username and password."
                                "minLength"   = 1
                                "type"        = "string"
                              }
                            }
                            "type" = "object"
                          }
                        }
                        "type" = "object"
                      }
                      "type" = "array"
                    }
                    "mode" = {
                      "description" = "Mode specifies what approach to security is being used."
                      "enum" = [
                        "user",
                        "active-directory",
                      ]
                      "type" = "string"
                    }
                    "realm" = {
                      "description" = "Realm specifies the active directory domain to use."
                      "type"        = "string"
                    }
                    "users" = {
                      "description" = "Users is used to configure \"local\" user and group based security."
                      "properties" = {
                        "key" = {
                          "description" = "Key identifies the key within the secret that stores the user and group configuration json."
                          "minLength"   = 1
                          "type"        = "string"
                        }
                        "secret" = {
                          "description" = "Secret identifies the name of the secret storing user and group configuration json."
                          "minLength"   = 1
                          "type"        = "string"
                        }
                      }
                      "type" = "object"
                    }
                  }
                  "type" = "object"
                }
                "status" = {
                  "description" = "SmbSecurityConfigStatus defines the observed state of SmbSecurityConfig"
                  "type"        = "object"
                }
              }
              "type" = "object"
            }
          }
          "served"  = true
          "storage" = true
          "subresources" = {
            "status" = {}
          }
        },
      ]
    }
  }
}

resource "kubernetes_manifest" "customresourcedefinition_smbshares_samba_operator_samba_org" {
  manifest = {
    "apiVersion" = "apiextensions.k8s.io/v1"
    "kind"       = "CustomResourceDefinition"
    "metadata" = {
      "annotations" = {
        "controller-gen.kubebuilder.io/version" = "v0.6.2"
      }
      "name" = "smbshares.samba-operator.samba.org"
    }
    "spec" = {
      "group" = "samba-operator.samba.org"
      "names" = {
        "kind"     = "SmbShare"
        "listKind" = "SmbShareList"
        "plural"   = "smbshares"
        "singular" = "smbshare"
      }
      "scope" = "Namespaced"
      "versions" = [
        {
          "additionalPrinterColumns" = [
            {
              "description" = "Name of the Samba share"
              "jsonPath"    = ".spec.shareName"
              "name"        = "Share-name"
              "type"        = "string"
            },
            {
              "description" = "Path for the share within PVC"
              "jsonPath"    = ".spec.storage.pvc.path"
              "name"        = "Share-path"
              "type"        = "string"
            },
            {
              "description" = "Samba availability mode"
              "jsonPath"    = ".spec.scaling.availabilityMode"
              "name"        = "Availability"
              "type"        = "string"
            },
            {
              "jsonPath" = ".metadata.creationTimestamp"
              "name"     = "Age"
              "type"     = "date"
            },
          ]
          "name" = "v1alpha1"
          "schema" = {
            "openAPIV3Schema" = {
              "description" = "SmbShare is the Schema for the smbshares API"
              "properties" = {
                "apiVersion" = {
                  "description" = "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
                  "type"        = "string"
                }
                "kind" = {
                  "description" = "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
                  "type"        = "string"
                }
                "metadata" = {
                  "type" = "object"
                }
                "spec" = {
                  "description" = "SmbShareSpec defines the desired state of SmbShare"
                  "properties" = {
                    "browseable" = {
                      "default"     = true
                      "description" = "Browseable controls if the share will be browseable. A browseable share is visible in listings."
                      "type"        = "boolean"
                    }
                    "commonConfig" = {
                      "description" = "CommonConfig specifies which SmbCommonConfig CR is to be used for this share. If left blank, the operator's default will be used."
                      "minLength"   = 1
                      "type"        = "string"
                    }
                    "readOnly" = {
                      "default"     = false
                      "description" = "ReadOnly controls if this share is to be read-only or not."
                      "type"        = "boolean"
                    }
                    "scaling" = {
                      "description" = "Scaling specifies parameters relating to how share resources can and should be scaled."
                      "properties" = {
                        "availabilityMode" = {
                          "default"     = "standard"
                          "description" = "AvailabilityMode specifies how the operator is to scale share resources for (high-)availability purposes."
                          "enum" = [
                            "standard",
                            "clustered",
                          ]
                          "type" = "string"
                        }
                        "minClusterSize" = {
                          "description" = "MinClusterSize specifies the minimum number of smb server instances to establish when availabilityMode is \"clustered\"."
                          "type"        = "integer"
                        }
                      }
                      "type" = "object"
                    }
                    "securityConfig" = {
                      "description" = "SecurityConfig specifies which SmbSecurityConfig CR is to be used for this share. If left blank, the operator's default will be used."
                      "minLength"   = 1
                      "type"        = "string"
                    }
                    "shareName" = {
                      "description" = "ShareName is an optional string that lets you define an SMB compliant name for the share. If unset, the name will be derived automatically."
                      "type"        = "string"
                    }
                    "storage" = {
                      "description" = "Storage defines the type and location of the storage that backs this share."
                      "properties" = {
                        "pvc" = {
                          "description" = "Pvc defines PVC backed storage for this share."
                          "properties" = {
                            "name" = {
                              "description" = "Name of the PVC to use for the share."
                              "type"        = "string"
                            }
                            "path" = {
                              "description" = "Path within the PVC which should be exported."
                              "pattern"     = "^[^\\/]+$"
                              "type"        = "string"
                            }
                            "spec" = {
                              "description" = "Spec defines a new, temporary, PVC to use for the share. Behaves similar to the embedded PVC spec for pods."
                              "properties" = {
                                "accessModes" = {
                                  "description" = "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1"
                                  "items" = {
                                    "type" = "string"
                                  }
                                  "type" = "array"
                                }
                                "dataSource" = {
                                  "description" = "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field."
                                  "properties" = {
                                    "apiGroup" = {
                                      "description" = "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                                      "type"        = "string"
                                    }
                                    "kind" = {
                                      "description" = "Kind is the type of resource being referenced"
                                      "type"        = "string"
                                    }
                                    "name" = {
                                      "description" = "Name is the name of resource being referenced"
                                      "type"        = "string"
                                    }
                                  }
                                  "required" = [
                                    "kind",
                                    "name",
                                  ]
                                  "type" = "object"
                                }
                                "dataSourceRef" = {
                                  "description" = "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef   allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef   preserves all values, and generates an error if a disallowed value is   specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled."
                                  "properties" = {
                                    "apiGroup" = {
                                      "description" = "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                                      "type"        = "string"
                                    }
                                    "kind" = {
                                      "description" = "Kind is the type of resource being referenced"
                                      "type"        = "string"
                                    }
                                    "name" = {
                                      "description" = "Name is the name of resource being referenced"
                                      "type"        = "string"
                                    }
                                  }
                                  "required" = [
                                    "kind",
                                    "name",
                                  ]
                                  "type" = "object"
                                }
                                "resources" = {
                                  "description" = "Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources"
                                  "properties" = {
                                    "limits" = {
                                      "additionalProperties" = {
                                        "anyOf" = [
                                          {
                                            "type" = "integer"
                                          },
                                          {
                                            "type" = "string"
                                          },
                                        ]
                                        "pattern"                    = "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
                                        "x-kubernetes-int-or-string" = true
                                      }
                                      "description" = "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"
                                      "type"        = "object"
                                    }
                                    "requests" = {
                                      "additionalProperties" = {
                                        "anyOf" = [
                                          {
                                            "type" = "integer"
                                          },
                                          {
                                            "type" = "string"
                                          },
                                        ]
                                        "pattern"                    = "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
                                        "x-kubernetes-int-or-string" = true
                                      }
                                      "description" = "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"
                                      "type"        = "object"
                                    }
                                  }
                                  "type" = "object"
                                }
                                "selector" = {
                                  "description" = "A label query over volumes to consider for binding."
                                  "properties" = {
                                    "matchExpressions" = {
                                      "description" = "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                                      "items" = {
                                        "description" = "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
                                        "properties" = {
                                          "key" = {
                                            "description" = "key is the label key that the selector applies to."
                                            "type"        = "string"
                                          }
                                          "operator" = {
                                            "description" = "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                            "type"        = "string"
                                          }
                                          "values" = {
                                            "description" = "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                                            "items" = {
                                              "type" = "string"
                                            }
                                            "type" = "array"
                                          }
                                        }
                                        "required" = [
                                          "key",
                                          "operator",
                                        ]
                                        "type" = "object"
                                      }
                                      "type" = "array"
                                    }
                                    "matchLabels" = {
                                      "additionalProperties" = {
                                        "type" = "string"
                                      }
                                      "description" = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                                      "type"        = "object"
                                    }
                                  }
                                  "type" = "object"
                                }
                                "storageClassName" = {
                                  "description" = "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
                                  "type"        = "string"
                                }
                                "volumeMode" = {
                                  "description" = "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec."
                                  "type"        = "string"
                                }
                                "volumeName" = {
                                  "description" = "VolumeName is the binding reference to the PersistentVolume backing this claim."
                                  "type"        = "string"
                                }
                              }
                              "type" = "object"
                            }
                          }
                          "type" = "object"
                        }
                      }
                      "type" = "object"
                    }
                  }
                  "required" = [
                    "storage",
                  ]
                  "type" = "object"
                }
                "status" = {
                  "description" = "SmbShareStatus defines the observed state of SmbShare"
                  "properties" = {
                    "serverGroup" = {
                      "description" = "ServerGroup is a string indicating a name for the smb server or group of servers hosting this share. The name is assigned by the operator but is frequently the same as the SmbShare resource's name."
                      "type"        = "string"
                    }
                  }
                  "type" = "object"
                }
              }
              "type" = "object"
            }
          }
          "served"  = true
          "storage" = true
          "subresources" = {
            "status" = {}
          }
        },
      ]
    }
  }
}


resource "kubernetes_namespace" "samba_operator_system" {
  metadata {
    name = "samba-operator-system"

    labels = {
      control-plane = "controller-manager"
    }
  }
}

resource "kubernetes_role" "samba_operator_leader_election_role" {
  metadata {
    name      = "samba-operator-leader-election-role"
    namespace = kubernetes_namespace.samba_operator_system.metadata[0].name
  }

  rule {
    verbs      = ["get", "list", "watch", "create", "update", "patch", "delete"]
    api_groups = [""]
    resources  = ["configmaps"]
  }

  rule {
    verbs      = ["get", "update", "patch"]
    api_groups = [""]
    resources  = ["configmaps/status"]
  }

  rule {
    verbs      = ["create", "patch"]
    api_groups = [""]
    resources  = ["events"]
  }

  rule {
    verbs      = ["get", "create", "update"]
    api_groups = ["coordination.k8s.io"]
    resources  = ["leases"]
  }
}

resource "kubernetes_cluster_role" "samba_operator_manager_role" {
  metadata {
    name = "samba-operator-manager-role"
  }

  rule {
    verbs      = ["create", "delete", "get", "list", "patch", "update", "watch"]
    api_groups = ["apps"]
    resources  = ["deployments"]
  }

  rule {
    verbs      = ["create", "delete", "get", "list", "patch", "update", "watch"]
    api_groups = ["apps"]
    resources  = ["statefulsets"]
  }

  rule {
    verbs      = ["create", "delete", "get", "list", "update", "watch"]
    api_groups = ["coordination.k8s.io"]
    resources  = ["leases"]
  }

  rule {
    verbs      = ["create", "delete", "get", "list", "patch", "update", "watch"]
    api_groups = [""]
    resources  = ["configmaps"]
  }

  rule {
    verbs      = ["create"]
    api_groups = [""]
    resources  = ["events"]
  }

  rule {
    verbs      = ["create", "delete", "get", "list", "patch", "update", "watch"]
    api_groups = [""]
    resources  = ["persistentvolumeclaims"]
  }

  rule {
    verbs      = ["get", "list"]
    api_groups = [""]
    resources  = ["pods"]
  }

  rule {
    verbs      = ["create", "delete", "get", "list", "patch", "update", "watch"]
    api_groups = [""]
    resources  = ["services"]
  }

  rule {
    verbs      = ["create", "delete", "get", "list", "patch", "update", "watch"]
    api_groups = ["samba-operator.samba.org"]
    resources  = ["smbcommonconfigs"]
  }

  rule {
    verbs      = ["get", "patch", "update"]
    api_groups = ["samba-operator.samba.org"]
    resources  = ["smbcommonconfigs/status"]
  }

  rule {
    verbs      = ["create", "delete", "get", "list", "patch", "update", "watch"]
    api_groups = ["samba-operator.samba.org"]
    resources  = ["smbsecurityconfigs"]
  }

  rule {
    verbs      = ["get", "patch", "update"]
    api_groups = ["samba-operator.samba.org"]
    resources  = ["smbsecurityconfigs/status"]
  }

  rule {
    verbs      = ["create", "delete", "get", "list", "patch", "update", "watch"]
    api_groups = ["samba-operator.samba.org"]
    resources  = ["smbshares"]
  }

  rule {
    verbs      = ["get", "patch", "update"]
    api_groups = ["samba-operator.samba.org"]
    resources  = ["smbshares/finalizers"]
  }

  rule {
    verbs      = ["get", "patch", "update"]
    api_groups = ["samba-operator.samba.org"]
    resources  = ["smbshares/status"]
  }

  depends_on = [
    kubernetes_manifest.customresourcedefinition_smbcommonconfigs_samba_operator_samba_org,
    kubernetes_manifest.customresourcedefinition_smbsecurityconfigs_samba_operator_samba_org,
    kubernetes_manifest.customresourcedefinition_smbshares_samba_operator_samba_org,
  ]
}

resource "kubernetes_cluster_role" "samba_operator_metrics_reader" {
  metadata {
    name = "samba-operator-metrics-reader"
  }

  rule {
    verbs             = ["get"]
    non_resource_urls = ["/metrics"]
  }
}

resource "kubernetes_cluster_role" "samba_operator_proxy_role" {
  metadata {
    name = "samba-operator-proxy-role"
  }

  rule {
    verbs      = ["create"]
    api_groups = ["authentication.k8s.io"]
    resources  = ["tokenreviews"]
  }

  rule {
    verbs      = ["create"]
    api_groups = ["authorization.k8s.io"]
    resources  = ["subjectaccessreviews"]
  }
}

resource "kubernetes_role_binding" "samba_operator_leader_election_rolebinding" {
  metadata {
    name      = "samba-operator-leader-election-rolebinding"
    namespace = kubernetes_namespace.samba_operator_system.metadata[0].name
  }

  subject {
    kind      = "ServiceAccount"
    name      = "default"
    namespace = kubernetes_namespace.samba_operator_system.metadata[0].name
  }

  role_ref {
    api_group = "rbac.authorization.k8s.io"
    kind      = "Role"
    name      = kubernetes_role.samba_operator_leader_election_role.metadata[0].name
  }
}

resource "kubernetes_cluster_role_binding" "samba_operator_manager_rolebinding" {
  metadata {
    name = "samba-operator-manager-rolebinding"
  }

  subject {
    kind      = "ServiceAccount"
    name      = "default"
    namespace = kubernetes_namespace.samba_operator_system.metadata[0].name
  }

  role_ref {
    api_group = "rbac.authorization.k8s.io"
    kind      = "ClusterRole"
    name      = kubernetes_cluster_role.samba_operator_manager_role.metadata[0].name
  }
}

resource "kubernetes_cluster_role_binding" "samba_operator_proxy_rolebinding" {
  metadata {
    name = "samba-operator-proxy-rolebinding"
  }

  subject {
    kind      = "ServiceAccount"
    name      = "default"
    namespace = kubernetes_namespace.samba_operator_system.metadata[0].name
  }

  role_ref {
    api_group = "rbac.authorization.k8s.io"
    kind      = "ClusterRole"
    name      = kubernetes_cluster_role.samba_operator_proxy_role.metadata[0].name
  }
}

resource "kubernetes_config_map" "samba_operator_controller_cfg" {
  metadata {
    name      = "samba-operator-controller-cfg"
    namespace = kubernetes_namespace.samba_operator_system.metadata[0].name
  }
}

resource "kubernetes_service" "samba_operator_controller_manager_metrics_service" {
  metadata {
    name      = "samba-operator-controller-manager-metrics-service"
    namespace = kubernetes_namespace.samba_operator_system.metadata[0].name

    labels = {
      control-plane = "controller-manager"
    }
  }

  spec {
    port {
      name        = "https"
      port        = 8443
      target_port = "https"
    }

    selector = {
      control-plane = "controller-manager"
    }
  }
}

resource "kubernetes_deployment" "samba_operator_controller_manager" {
  metadata {
    name      = "samba-operator-controller-manager"
    namespace = kubernetes_namespace.samba_operator_system.metadata[0].name

    labels = {
      control-plane = "controller-manager"
    }
  }

  spec {
    replicas = 1

    selector {
      match_labels = {
        control-plane = "controller-manager"
      }
    }

    template {
      metadata {
        labels = {
          control-plane = "controller-manager"
        }

        annotations = {
          "kubectl.kubernetes.io/default-container"      = "manager"
          "kubectl.kubernetes.io/default-logs-container" = "manager"
        }
      }

      spec {
        container {
          name  = "kube-rbac-proxy"
          image = "gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0"
          args  = ["--secure-listen-address=0.0.0.0:8443", "--upstream=http://127.0.0.1:8080/", "--logtostderr=true", "--v=10"]

          port {
            name           = "https"
            container_port = 8443
          }
        }

        container {
          name    = "manager"
          image   = "quay.io/samba.org/samba-operator:v0.2"
          command = ["/manager"]
          args    = ["--metrics-addr=127.0.0.1:8080", "--enable-leader-election"]

          env_from {
            config_map_ref {
              name = kubernetes_config_map.samba_operator_controller_cfg.metadata[0].name
            }
          }

          env {
            name = "SAMBA_OP_POD_NAME"

            value_from {
              field_ref {
                field_path = "metadata.name"
              }
            }
          }

          env {
            name = "SAMBA_OP_POD_NAMESPACE"

            value_from {
              field_ref {
                field_path = "metadata.namespace"
              }
            }
          }

          env {
            name = "SAMBA_OP_POD_IP"

            value_from {
              field_ref {
                field_path = "status.podIP"
              }
            }
          }

          env {
            name = "SAMBA_OP_WORKING_NAMESPACE"

            value_from {
              field_ref {
                field_path = "metadata.namespace"
              }
            }
          }

          resources {
            limits = {
              cpu    = "100m"
              memory = "100Mi"
            }

            requests = {
              cpu    = "100m"
              memory = "20Mi"
            }
          }

          image_pull_policy = "Always"
        }

        termination_grace_period_seconds = 10
      }
    }
  }
}
